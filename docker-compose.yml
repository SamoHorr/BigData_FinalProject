version: '3.8'

services:
  zookeeper:
    container_name: zookeeper-container
    image: confluentinc/cp-zookeeper:7.2.2
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - my_network

  kafka:
    container_name: kafka-container
    image: confluentinc/cp-kafka:7.2.2
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    networks:
      - my_network
    expose:
      - '29092'
    environment:
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
      KAFKA_MIN_INSYNC_REPLICAS: '1'

  init-kafka:
    container_name: init-kafka
    image: confluentinc/cp-kafka:7.2.2
    depends_on:
      - kafka
    entrypoint: /bin/sh -c "kafka-topics --bootstrap-server kafka:29092 --list && kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic ratings --replication-factor 1 --partitions 1 && kafka-topics --bootstrap-server kafka:29092 --list"
    networks:
      - my_network
    # image: confluentinc/cp-kafka:6.1.1
    # depends_on:
    #   - kafka
    # entrypoint: [ '/bin/sh', '-c' ]
    # command: |
    #   # blocks until kafka is reachable
    #   kafka-topics --bootstrap-server kafka:29092 --list

    #   echo -e 'Creating kafka topics'
    #   kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic ratings --replication-factor 1 --partitions 1

    #   echo -e 'Successfully created the following topics:'
    #   kafka-topics --bootstrap-server kafka:29092 --list
    # networks:
    #   - my_network
    
  app:
    container_name: python-app
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      DOCKER_ENV: "true"
    ports:
      - "5000:5000"
    networks:
      - my_network
    depends_on:
      - kafka
      - redis

  redis:
    container_name: redis-container
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - my_network

networks:
  my_network:
    driver: bridge
